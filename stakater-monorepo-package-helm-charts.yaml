---
# Source: stakater-push-main-tag-bitbucket/templates/task.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: stakater-monorepo-package-helm-charts
  labels:
    app.kubernetes.io/version: "0.0.0"
spec:
  params:
    - name: CUSTOM_CA_CERT_PATH
      type: string
      default: ""
    - name: REGISTRY
      type: string
    - name: HELM_REG_CREDS_SECRET_NAME
      description: Helm registry credentials secret name
      default: "helm-reg-creds" 
    - name: revision
      value: $(params.revision)
  steps:
    - name: "helm-package"
      image: 'stakater/pipeline-toolbox:v0.0.36'
      resources: {}
      workingDir: $(workspaces.source.path)
      command:
        - /bin/bash
      volumeMounts:
        - mountPath: /tmp/charts
          name: charts
      env:
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      args:
        - '-c'
        - >
            if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${HOME}/.git-credentials";
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${HOME}/.gitconfig";
              chmod 400 "${HOME}/.git-credentials";
              chmod 400 "${HOME}/.gitconfig";
            fi
          
            git config --global --add safe.directory /workspace/source;
            git config --global --add user.email "tekton@csn.se";
            git config --global --add user.name "tekton";

            if [[ "$(params.CUSTOM_CA_CERT_PATH)" != "" ]]; then
              git config --global http.sslCAInfo $(params.CUSTOM_CA_CERT_PATH);
            fi

            LAST_SUCCESSFUL_BUILD="pipeline-last-successful-build";

            if ! [ git rev-parse ${LAST_SUCCESSFUL_BUILD} >/dev/null 2>&1 ]; then
              LAST_SUCCESSFUL_BUILD=$(git rev-list --parents HEAD --max-parents=0);
            fi

            echo $LAST_SUCCESSFUL_BUILD;

            git diff --no-commit-id $LAST_SUCCESSFUL_BUILD..$(params.revision) --name-only -r | while read CHART;
            do
            
              if [ $(basename "$CHART") == "Chart.yaml" ]; then

                # check if file exists, easier doing it like this rather than git diff --diff-filter
                # This could happen if the Chart has been removed, renamed, etc.
                if ! [ -f "$CHART" ]; then
                  continue;
                fi

                CHART_NAME=$(cat $CHART | awk -F "^name: " 'NF>1{print $2;exit; }');
                CHART_VERSION=$(cat $CHART | awk -F "^version: " 'NF>1{print $2;exit; }');
                CHART_TAG="$CHART_NAME-$CHART_VERSION";
                CHART_DIR=$(dirname $CHART);

                CHART_PACKAGE=$(helm package --version $CHART_VERSION $CHART_DIR 2>&1);
                if [ $? -ne 0 ]; then
                    echo $CHART_PACKAGE;
                    exit 1;
                fi

                CHART_PACKAGE=$(echo "$CHART_PACKAGE" | cut -d":" -f2 | tr -d '[:space:]');
                
                mv $CHART_PACKAGE /tmp/charts;
              fi

            done

            ls -la /tmp/charts
            
    - name: "upload-helmcharts-to-nexus"
      image: 'stakater/pipeline-toolbox:v0.0.36'
      resources: {}
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      command:
        - /bin/bash
      volumeMounts:
        - mountPath: /tmp/charts  
          name: charts
      env:
        - name: REG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.HELM_REG_CREDS_SECRET_NAME)
              key: password
        - name: REG_USER
          valueFrom:
            secretKeyRef:
              name: $(params.HELM_REG_CREDS_SECRET_NAME)  
              key: username
      args:
        - '-c'
        - >
            for CHART in /tmp/charts/*;
            do

              echo $CHART;
              if [ "$(params.CUSTOM_CA_CERT_PATH)" != "" ]; then
                  RESULT=$(curl -I -u "${REG_USER}":"${REG_PASSWORD}" $(params.REGISTRY) --upload-file "$CHART" --cacert $(params.CUSTOM_CA_CERT_PATH) -w %{http_code} 2> /dev/null |tail -n 1)
              else
                  RESULT=$(curl -I -u "${REG_USER}":"${REG_PASSWORD}" $(params.REGISTRY) --upload-file "$CHART" -w %{http_code} 2> /dev/null |tail -n 1)
              fi
            
              if [ $RESULT -ne 200 ]; then
                echo "error: got exit code $RESULT when uploading package to nexus"
                exit 1;
              fi
            done
    - name: "update-build-tag"
      image: 'stakater/pipeline-toolbox:v0.0.36'
      resources: {}
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      command:
        - /bin/bash
      env:
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
      args:
        - '-c'
        - >
            if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${HOME}/.git-credentials";
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${HOME}/.gitconfig";
              chmod 400 "${HOME}/.git-credentials";
              chmod 400 "${HOME}/.gitconfig";
            fi
          
            git config --global --add safe.directory /workspace/source;
            git config --global --add user.email "tekton@csn.se";
            git config --global --add user.name "tekton";

            if [[ "$(params.CUSTOM_CA_CERT_PATH)" != "" ]]; then
              git config --global http.sslCAInfo $(params.CUSTOM_CA_CERT_PATH);
            fi

            git tag --force pipeline-last-successful-build;
            git push --force --tags;
  volumes:
    - name: charts
      emptyDir: {}
  workspaces:
    - name: source
    - name: ssh-directory
      optional: true
    - name: basic-auth
